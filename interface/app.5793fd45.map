{"version":3,"sources":["components/Message.tsx","components/MessageStack.tsx","components/Status.tsx","app.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,KAAA,GAAA,YAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AAGA,IAAM,OAAO,GAAG,UAAC,KAAD,EAA2B;AAAK,SAC9C;AAAK,IAAA,SAAS,EAAC,eAAf;AAA+B,IAAA,GAAG,EAAE,KAAK,CAAC,OAAN,CAAc,EAAd,CAAiB,QAAjB;AAApC,KACE;AAAK,IAAA,SAAS,EAAC;AAAf,qBAA8C,kCAAO,KAAK,CAAC,OAAN,CAAc,EAArB,CAA9C,CADF,EAEE;AAAK,IAAA,SAAS,EAAC;AAAf,oBAA4C,kCAAO,KAAK,CAAC,OAAN,CAAc,QAArB,CAA5C,CAFF,EAGE;AAAK,IAAA,SAAS,EAAC;AAAf,gBAAoC,kCAAO,KAAK,CAAC,OAAN,CAAc,KAArB,CAApC,CAHF,EAIE;AAAK,IAAA,SAAS,EAAC;AAAf,kBAAwC,iCAAK,kCAAO,IAAI,CAAC,SAAL,CAAe,KAAK,CAAC,OAAN,CAAc,OAA7B,CAAP,CAAL,CAAxC,CAJF,CAD8C;AAO3C,CAPL;;AAQA,OAAA,CAAA,SAAA,CAAA,GAAe,OAAf;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACXA,IAAA,KAAA,GAAA,YAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AAEA,IAAA,SAAA,GAAA,eAAA,CAAA,OAAA,CAAA,WAAA,CAAA,CAAA;;AAIA,IAAA,YAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA2B,EAAA,SAAA,CAAA,YAAA,EAAA,MAAA,CAAA;;AAA3B,WAAA,YAAA,GAAA;;AAYC;;AAXQ,EAAA,YAAA,CAAA,SAAA,CAAA,MAAA,GAAP,YAAA;AACE,QAAI,KAAK,KAAL,CAAW,QAAX,KAAwB,SAA5B,EAAuC;AACrC,aAAO;AAAK,QAAA,SAAS,EAAC;AAAf,QAAP;AACD,KAFD,MAEO;AACL,aACA;AAAK,QAAA,SAAS,EAAC;AAAf,SACG,KAAK,KAAL,CAAW,QAAX,CAAoB,KAApB,CAA0B,CAA1B,EAA6B,OAA7B,GAAuC,GAAvC,CAA2C,UAAC,GAAD,EAAI;AAAK,eAAA,oBAAC,SAAD,CAAC,OAAD;AAAS,UAAA,OAAO,EAAE;AAAlB,UAAA;AAAyB,OAA7E,CADH,CADA;AAKD;AACF,GAVM;;AAWT,SAAA,YAAA;AAZA,CAAA,CAA2B,KAAK,CAAC,SAAjC,CAAA;;AAcA,OAAA,CAAA,SAAA,CAAA,GAAe,YAAf;;;;;;;;;;;;;;ACpBA,IAAA,KAAA,GAAA,YAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AAKA,IAAM,MAAM,GAAG,UAAC,KAAD,EAAoB;AAAK,SAAC,uEAAwC,KAAK,CAAC,IAA9C,CAAD;AAA0D,CAAlG;;AAEA,OAAA,CAAA,SAAA,CAAA,GAAe,MAAf;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPA,IAAA,UAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AACA,IAAA,KAAA,GAAA,YAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,QAAA,GAAA,YAAA,CAAA,OAAA,CAAA,WAAA,CAAA,CAAA;;AAEA,IAAA,cAAA,GAAA,eAAA,CAAA,OAAA,CAAA,2BAAA,CAAA,CAAA;;AACA,IAAA,QAAA,GAAA,eAAA,CAAA,OAAA,CAAA,qBAAA,CAAA,CAAA;;AAmBA,IAAA,GAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAkB,EAAA,SAAA,CAAA,GAAA,EAAA,MAAA,CAAA;;AAAlB,WAAA,GAAA,GAAA;AAAA,QAAA,KAAA,GAAA,MAAA,KAAA,IAAA,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA;;AACU,IAAA,KAAA,CAAA,KAAA,GAA0B;AAChC,MAAA,KAAK,EAAE,CADyB;AAEhC,MAAA,IAAI,EAAE;AAF0B,KAA1B;;AAID,IAAA,KAAA,CAAA,WAAA,GAAc,UAAC,KAAD,EAAa,IAAb,EAAsB;AACzC,MAAA,KAAI,CAAC,QAAL,CAAc;AAAC,QAAA,KAAK,EAAE,KAAI,CAAC,KAAL,CAAW,KAAX,GAAmB;AAA3B,OAAd;;AACA,UAAI,KAAI,CAAC,KAAL,CAAW,QAAX,KAAwB,SAA5B,EAAuC;AACrC,YAAM,QAAQ,GAAO,KAAI,CAAC,KAAL,CAAW,QAAX,CAAmB,MAAnB,CAAmB,CAAE;AACxC,UAAA,QAAQ,EAAE,IAAI,CAAC,QADyB;AAExC,UAAA,EAAE,EAAE,KAAI,CAAC,KAAL,CAAW,KAFyB;AAGxC,UAAA,OAAO,EAAE,IAAI,CAAC,OAH0B;AAIxC,UAAA,KAAK,EAAE,IAAI,CAAC;AAJ4B,SAAF,CAAnB,CAArB;;AAMA,QAAA,KAAI,CAAC,QAAL,CAAc;AAAC,UAAA,QAAQ,EAAA;AAAT,SAAd;AACD,OARD,MAQO;AACL,QAAA,KAAI,CAAC,QAAL,CAAc;AACZ,UAAA,QAAQ,EAAE,CACR;AACF,YAAA,QAAQ,EAAE,IAAI,CAAC,QADb;AAEF,YAAA,EAAE,EAAE,KAAI,CAAC,KAAL,CAAW,KAFb;AAGF,YAAA,OAAO,EAAE,IAAI,CAAC,OAHZ;AAIF,YAAA,KAAK,EAAE,IAAI,CAAC;AAJV,WADQ;AADE,SAAd;AASD;AACF,KArBM;;AAqCC,IAAA,KAAA,CAAA,aAAA,GAAgB,YAAA;AACtB;AACA;AACA,MAAA,OAAO,CAAC,GAAR,CAAY,KAAI,CAAC,KAAjB;AACD,KAJO;;;AAKT;;AApBQ,EAAA,GAAA,CAAA,SAAA,CAAA,iBAAA,GAAP,YAAA;AACE,IAAA,UAAA,CAAA,WAAA,CAAY,EAAZ,CAAe,WAAf,EAA4B,KAAK,WAAjC;AACD,GAFM;;AAGA,EAAA,GAAA,CAAA,SAAA,CAAA,oBAAA,GAAP,YAAA;AACE,IAAA,UAAA,CAAA,WAAA,CAAY,kBAAZ,CAA+B,WAA/B;AACD,GAFM;;AAGA,EAAA,GAAA,CAAA,SAAA,CAAA,MAAA,GAAP,YAAA;AACE,WACE,iCACE,oBAAC,QAAD,CAAC,OAAD;AAAQ,MAAA,IAAI,EAAE,KAAK,KAAL,CAAW;AAAzB,MADF,EAEE;AAAQ,MAAA,OAAO,EAAE,KAAK;AAAtB,mBAFF,EAGE,oBAAC,cAAD,CAAC,OAAD;AAAc,MAAA,QAAQ,EAAE,KAAK,KAAL,CAAW;AAAnC,MAHF,CADF;AAOD,GARM;;AAcT,SAAA,GAAA;AA/CA,CAAA,CAAkB,KAAK,CAAC,SAAxB,CAAA;;AAiDA,QAAQ,CAAC,MAAT,CACE,oBAAC,GAAD;AAAK,EAAA,QAAQ,EAAC;AAAd,EADF,EAEE,QAAQ,CAAC,cAAT,CAAwB,MAAxB,CAFF","file":"app.5793fd45.map","sourceRoot":"../src-renderer","sourcesContent":["import * as React from 'react';\nimport {IMessage} from '../app';\n\nconst Message = (props: {message: IMessage}) => (\n  <div className=\"mqtt__message\" key={props.message.id.toString()}>\n    <div className=\"mqtt__message-id\">Message ID: <code>{props.message.id}</code></div>\n    <div className=\"mqtt__client-id\">Client ID: <code>{props.message.clientId}</code></div>\n    <div className=\"mqtt__topic\">Topic: <code>{props.message.topic}</code></div>\n    <div className=\"mqtt__payload\">Payload: <pre><code>{JSON.stringify(props.message.payload)}</code></pre></div>\n  </div>\n    );\nexport default Message;\n","import * as React from 'react';\nimport {IMessage} from '../app';\nimport Message from './Message';\nexport interface IMessageStackProps {\n  messages?: IMessage[];\n}\nclass MessageStack extends React.Component<IMessageStackProps, {}> {\n  public render() {\n    if (this.props.messages === undefined) {\n      return <div className=\"message-stack\"></div>;\n    } else {\n      return (\n      <div className=\"message-stack\">\n        {this.props.messages.slice(0).reverse().map((ele) => <Message message={ele} />)}\n      </div>\n      );\n    }\n  }\n}\n\nexport default MessageStack;\n","import * as React from 'react';\n\nexport interface IStatusProps {\n  port: number;\n}\nconst Status = (props: IStatusProps) => (<h2>Moscatron Broker listening on port {props.port}</h2>);\n\nexport default Status;\n","import { ipcRenderer } from 'electron';\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport Message from './components/Message';\nimport MessageStack from './components/MessageStack';\nimport Status from './components/Status';\n\nexport interface IProps {\n  greeting: string;\n}\n\nexport interface IMessage {\n    clientId: string;\n    id: number;\n    topic: string;\n    payload: string;\n\n}\nexport interface IState {\n  count: number;\n  port: number;\n  messages?: IMessage[];\n  publistener?: () => void;\n}\nclass App extends React.Component<IProps, IState> {\n   public state: Readonly<IState> = {\n    count: 0,\n    port: 1883,\n  };\n  public publistener = (event: any, args: any) => {\n    this.setState({count: this.state.count + 1});\n    if (this.state.messages !== undefined) {\n      const messages = [...this.state.messages, {\n        clientId: args.clientId,\n        id: this.state.count,\n        payload: args.payload,\n        topic: args.topic,\n      }];\n      this.setState({messages});\n    } else {\n      this.setState({\n        messages: [\n          {\n        clientId: args.clientId,\n        id: this.state.count,\n        payload: args.payload,\n        topic: args.topic},\n      ],\n    });\n    }\n  }\n  public componentDidMount() {\n    ipcRenderer.on('published', this.publistener);\n  }\n  public componentWillUnmount() {\n    ipcRenderer.removeAllListeners('published');\n  }\n  public render() {\n    return (\n      <div>\n        <Status port={this.state.port}/>\n        <button onClick={this.handleMessage}>get state</button>\n        <MessageStack messages={this.state.messages} />\n      </div>\n    );\n  }\n  private handleMessage = () => {\n    // return 'foo';\n    // tslint:disable-next-line:no-console\n    console.log(this.state);\n  }\n}\n\nReactDOM.render(\n  <App greeting=\"Hello, crude React world!\" />,\n  document.getElementById(\"main\"),\n);\n"]}